module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCategory {
  count: Int!
}

type AggregateInventory {
  count: Int!
}

type AggregateProducts {
  count: Int!
}

type AggregateReorder {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Category {
  id: ID!
  categoryname: String!
  product(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Products!]
}

type CategoryConnection {
  pageInfo: PageInfo!
  edges: [CategoryEdge]!
  aggregate: AggregateCategory!
}

input CategoryCreateInput {
  categoryname: String!
  product: ProductsCreateManyWithoutCategoryInput
}

input CategoryCreateOneWithoutProductInput {
  create: CategoryCreateWithoutProductInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateWithoutProductInput {
  categoryname: String!
}

type CategoryEdge {
  node: Category!
  cursor: String!
}

enum CategoryOrderByInput {
  id_ASC
  id_DESC
  categoryname_ASC
  categoryname_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CategoryPreviousValues {
  id: ID!
  categoryname: String!
}

type CategorySubscriptionPayload {
  mutation: MutationType!
  node: Category
  updatedFields: [String!]
  previousValues: CategoryPreviousValues
}

input CategorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CategoryWhereInput
  AND: [CategorySubscriptionWhereInput!]
  OR: [CategorySubscriptionWhereInput!]
  NOT: [CategorySubscriptionWhereInput!]
}

input CategoryUpdateInput {
  categoryname: String
  product: ProductsUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyMutationInput {
  categoryname: String
}

input CategoryUpdateOneRequiredWithoutProductInput {
  create: CategoryCreateWithoutProductInput
  update: CategoryUpdateWithoutProductDataInput
  upsert: CategoryUpsertWithoutProductInput
  connect: CategoryWhereUniqueInput
}

input CategoryUpdateWithoutProductDataInput {
  categoryname: String
}

input CategoryUpsertWithoutProductInput {
  update: CategoryUpdateWithoutProductDataInput!
  create: CategoryCreateWithoutProductInput!
}

input CategoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  categoryname: String
  categoryname_not: String
  categoryname_in: [String!]
  categoryname_not_in: [String!]
  categoryname_lt: String
  categoryname_lte: String
  categoryname_gt: String
  categoryname_gte: String
  categoryname_contains: String
  categoryname_not_contains: String
  categoryname_starts_with: String
  categoryname_not_starts_with: String
  categoryname_ends_with: String
  categoryname_not_ends_with: String
  product_every: ProductsWhereInput
  product_some: ProductsWhereInput
  product_none: ProductsWhereInput
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
}

input CategoryWhereUniqueInput {
  id: ID
}

type Inventory {
  id: ID!
  quan_in_stock: Int!
  sales: Int!
  Products(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Products!]
}

type InventoryConnection {
  pageInfo: PageInfo!
  edges: [InventoryEdge]!
  aggregate: AggregateInventory!
}

input InventoryCreateInput {
  quan_in_stock: Int!
  sales: Int!
  Products: ProductsCreateManyInput
}

type InventoryEdge {
  node: Inventory!
  cursor: String!
}

enum InventoryOrderByInput {
  id_ASC
  id_DESC
  quan_in_stock_ASC
  quan_in_stock_DESC
  sales_ASC
  sales_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InventoryPreviousValues {
  id: ID!
  quan_in_stock: Int!
  sales: Int!
}

type InventorySubscriptionPayload {
  mutation: MutationType!
  node: Inventory
  updatedFields: [String!]
  previousValues: InventoryPreviousValues
}

input InventorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InventoryWhereInput
  AND: [InventorySubscriptionWhereInput!]
  OR: [InventorySubscriptionWhereInput!]
  NOT: [InventorySubscriptionWhereInput!]
}

input InventoryUpdateInput {
  quan_in_stock: Int
  sales: Int
  Products: ProductsUpdateManyInput
}

input InventoryUpdateManyMutationInput {
  quan_in_stock: Int
  sales: Int
}

input InventoryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quan_in_stock: Int
  quan_in_stock_not: Int
  quan_in_stock_in: [Int!]
  quan_in_stock_not_in: [Int!]
  quan_in_stock_lt: Int
  quan_in_stock_lte: Int
  quan_in_stock_gt: Int
  quan_in_stock_gte: Int
  sales: Int
  sales_not: Int
  sales_in: [Int!]
  sales_not_in: [Int!]
  sales_lt: Int
  sales_lte: Int
  sales_gt: Int
  sales_gte: Int
  Products_every: ProductsWhereInput
  Products_some: ProductsWhereInput
  Products_none: ProductsWhereInput
  AND: [InventoryWhereInput!]
  OR: [InventoryWhereInput!]
  NOT: [InventoryWhereInput!]
}

input InventoryWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateManyCategories(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteManyCategories(where: CategoryWhereInput): BatchPayload!
  createInventory(data: InventoryCreateInput!): Inventory!
  updateInventory(data: InventoryUpdateInput!, where: InventoryWhereUniqueInput!): Inventory
  updateManyInventories(data: InventoryUpdateManyMutationInput!, where: InventoryWhereInput): BatchPayload!
  upsertInventory(where: InventoryWhereUniqueInput!, create: InventoryCreateInput!, update: InventoryUpdateInput!): Inventory!
  deleteInventory(where: InventoryWhereUniqueInput!): Inventory
  deleteManyInventories(where: InventoryWhereInput): BatchPayload!
  createProducts(data: ProductsCreateInput!): Products!
  updateProducts(data: ProductsUpdateInput!, where: ProductsWhereUniqueInput!): Products
  updateManyProductses(data: ProductsUpdateManyMutationInput!, where: ProductsWhereInput): BatchPayload!
  upsertProducts(where: ProductsWhereUniqueInput!, create: ProductsCreateInput!, update: ProductsUpdateInput!): Products!
  deleteProducts(where: ProductsWhereUniqueInput!): Products
  deleteManyProductses(where: ProductsWhereInput): BatchPayload!
  createReorder(data: ReorderCreateInput!): Reorder!
  updateReorder(data: ReorderUpdateInput!, where: ReorderWhereUniqueInput!): Reorder
  updateManyReorders(data: ReorderUpdateManyMutationInput!, where: ReorderWhereInput): BatchPayload!
  upsertReorder(where: ReorderWhereUniqueInput!, create: ReorderCreateInput!, update: ReorderUpdateInput!): Reorder!
  deleteReorder(where: ReorderWhereUniqueInput!): Reorder
  deleteManyReorders(where: ReorderWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Products {
  id: ID!
  title: String!
  actor: String!
  price: Float!
  category: Category!
}

type ProductsConnection {
  pageInfo: PageInfo!
  edges: [ProductsEdge]!
  aggregate: AggregateProducts!
}

input ProductsCreateInput {
  title: String!
  actor: String!
  price: Float!
  category: CategoryCreateOneWithoutProductInput!
}

input ProductsCreateManyInput {
  create: [ProductsCreateInput!]
  connect: [ProductsWhereUniqueInput!]
}

input ProductsCreateManyWithoutCategoryInput {
  create: [ProductsCreateWithoutCategoryInput!]
  connect: [ProductsWhereUniqueInput!]
}

input ProductsCreateWithoutCategoryInput {
  title: String!
  actor: String!
  price: Float!
}

type ProductsEdge {
  node: Products!
  cursor: String!
}

enum ProductsOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  actor_ASC
  actor_DESC
  price_ASC
  price_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProductsPreviousValues {
  id: ID!
  title: String!
  actor: String!
  price: Float!
}

input ProductsScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  actor: String
  actor_not: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_lt: String
  actor_lte: String
  actor_gt: String
  actor_gte: String
  actor_contains: String
  actor_not_contains: String
  actor_starts_with: String
  actor_not_starts_with: String
  actor_ends_with: String
  actor_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  AND: [ProductsScalarWhereInput!]
  OR: [ProductsScalarWhereInput!]
  NOT: [ProductsScalarWhereInput!]
}

type ProductsSubscriptionPayload {
  mutation: MutationType!
  node: Products
  updatedFields: [String!]
  previousValues: ProductsPreviousValues
}

input ProductsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductsWhereInput
  AND: [ProductsSubscriptionWhereInput!]
  OR: [ProductsSubscriptionWhereInput!]
  NOT: [ProductsSubscriptionWhereInput!]
}

input ProductsUpdateDataInput {
  title: String
  actor: String
  price: Float
  category: CategoryUpdateOneRequiredWithoutProductInput
}

input ProductsUpdateInput {
  title: String
  actor: String
  price: Float
  category: CategoryUpdateOneRequiredWithoutProductInput
}

input ProductsUpdateManyDataInput {
  title: String
  actor: String
  price: Float
}

input ProductsUpdateManyInput {
  create: [ProductsCreateInput!]
  update: [ProductsUpdateWithWhereUniqueNestedInput!]
  upsert: [ProductsUpsertWithWhereUniqueNestedInput!]
  delete: [ProductsWhereUniqueInput!]
  connect: [ProductsWhereUniqueInput!]
  set: [ProductsWhereUniqueInput!]
  disconnect: [ProductsWhereUniqueInput!]
  deleteMany: [ProductsScalarWhereInput!]
  updateMany: [ProductsUpdateManyWithWhereNestedInput!]
}

input ProductsUpdateManyMutationInput {
  title: String
  actor: String
  price: Float
}

input ProductsUpdateManyWithoutCategoryInput {
  create: [ProductsCreateWithoutCategoryInput!]
  delete: [ProductsWhereUniqueInput!]
  connect: [ProductsWhereUniqueInput!]
  set: [ProductsWhereUniqueInput!]
  disconnect: [ProductsWhereUniqueInput!]
  update: [ProductsUpdateWithWhereUniqueWithoutCategoryInput!]
  upsert: [ProductsUpsertWithWhereUniqueWithoutCategoryInput!]
  deleteMany: [ProductsScalarWhereInput!]
  updateMany: [ProductsUpdateManyWithWhereNestedInput!]
}

input ProductsUpdateManyWithWhereNestedInput {
  where: ProductsScalarWhereInput!
  data: ProductsUpdateManyDataInput!
}

input ProductsUpdateWithoutCategoryDataInput {
  title: String
  actor: String
  price: Float
}

input ProductsUpdateWithWhereUniqueNestedInput {
  where: ProductsWhereUniqueInput!
  data: ProductsUpdateDataInput!
}

input ProductsUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProductsWhereUniqueInput!
  data: ProductsUpdateWithoutCategoryDataInput!
}

input ProductsUpsertWithWhereUniqueNestedInput {
  where: ProductsWhereUniqueInput!
  update: ProductsUpdateDataInput!
  create: ProductsCreateInput!
}

input ProductsUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProductsWhereUniqueInput!
  update: ProductsUpdateWithoutCategoryDataInput!
  create: ProductsCreateWithoutCategoryInput!
}

input ProductsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  actor: String
  actor_not: String
  actor_in: [String!]
  actor_not_in: [String!]
  actor_lt: String
  actor_lte: String
  actor_gt: String
  actor_gte: String
  actor_contains: String
  actor_not_contains: String
  actor_starts_with: String
  actor_not_starts_with: String
  actor_ends_with: String
  actor_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  category: CategoryWhereInput
  AND: [ProductsWhereInput!]
  OR: [ProductsWhereInput!]
  NOT: [ProductsWhereInput!]
}

input ProductsWhereUniqueInput {
  id: ID
}

type Query {
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Category]!
  categoriesConnection(where: CategoryWhereInput, orderBy: CategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CategoryConnection!
  inventory(where: InventoryWhereUniqueInput!): Inventory
  inventories(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Inventory]!
  inventoriesConnection(where: InventoryWhereInput, orderBy: InventoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InventoryConnection!
  products(where: ProductsWhereUniqueInput!): Products
  productses(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Products]!
  productsesConnection(where: ProductsWhereInput, orderBy: ProductsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductsConnection!
  reorder(where: ReorderWhereUniqueInput!): Reorder
  reorders(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reorder]!
  reordersConnection(where: ReorderWhereInput, orderBy: ReorderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReorderConnection!
  node(id: ID!): Node
}

type Reorder {
  id: ID!
  quan_low: Int!
  quan_reordered: Int!
}

type ReorderConnection {
  pageInfo: PageInfo!
  edges: [ReorderEdge]!
  aggregate: AggregateReorder!
}

input ReorderCreateInput {
  quan_low: Int!
  quan_reordered: Int!
}

type ReorderEdge {
  node: Reorder!
  cursor: String!
}

enum ReorderOrderByInput {
  id_ASC
  id_DESC
  quan_low_ASC
  quan_low_DESC
  quan_reordered_ASC
  quan_reordered_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReorderPreviousValues {
  id: ID!
  quan_low: Int!
  quan_reordered: Int!
}

type ReorderSubscriptionPayload {
  mutation: MutationType!
  node: Reorder
  updatedFields: [String!]
  previousValues: ReorderPreviousValues
}

input ReorderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReorderWhereInput
  AND: [ReorderSubscriptionWhereInput!]
  OR: [ReorderSubscriptionWhereInput!]
  NOT: [ReorderSubscriptionWhereInput!]
}

input ReorderUpdateInput {
  quan_low: Int
  quan_reordered: Int
}

input ReorderUpdateManyMutationInput {
  quan_low: Int
  quan_reordered: Int
}

input ReorderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quan_low: Int
  quan_low_not: Int
  quan_low_in: [Int!]
  quan_low_not_in: [Int!]
  quan_low_lt: Int
  quan_low_lte: Int
  quan_low_gt: Int
  quan_low_gte: Int
  quan_reordered: Int
  quan_reordered_not: Int
  quan_reordered_in: [Int!]
  quan_reordered_not_in: [Int!]
  quan_reordered_lt: Int
  quan_reordered_lte: Int
  quan_reordered_gt: Int
  quan_reordered_gte: Int
  AND: [ReorderWhereInput!]
  OR: [ReorderWhereInput!]
  NOT: [ReorderWhereInput!]
}

input ReorderWhereUniqueInput {
  id: ID
}

type Subscription {
  category(where: CategorySubscriptionWhereInput): CategorySubscriptionPayload
  inventory(where: InventorySubscriptionWhereInput): InventorySubscriptionPayload
  products(where: ProductsSubscriptionWhereInput): ProductsSubscriptionPayload
  reorder(where: ReorderSubscriptionWhereInput): ReorderSubscriptionPayload
}
`
      }
    